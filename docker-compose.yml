services:
    app:
        build:
            context: .
            target: development
        ports:
            - "8000:80"
        volumes:
            - .:/var/www/html
        environment:
            - APP_ENV=${APP_ENV:-local}
            - APP_DEBUG=${APP_DEBUG:-true}
            - APP_URL=http://app:80
        depends_on:
            db:
                condition: service_healthy
        networks:
            - app-network

    queue:
        build:
            context: .
            target: queue-worker
        volumes:
            - .:/var/www/html
        environment:
            - APP_ENV=${APP_ENV:-local}
            - APP_DEBUG=${APP_DEBUG:-true}
        depends_on:
            db:
                condition: service_healthy
        restart: unless-stopped
        networks:
            - app-network

    db:
        image: mysql:8.0
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-secret}
            MYSQL_DATABASE: ${DB_DATABASE:-dex}
            MYSQL_USER: ${DB_USER:-dex}
            MYSQL_PASSWORD: ${DB_PASSWORD:-secret}
        ports:
            - "${DB_HOST_PORT:-3306}:${DB_PORT:-3306}"
        volumes:
            - db:/var/lib/mysql
        restart: unless-stopped
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-secret}" ]
            timeout: 20s
            retries: 10
            interval: 10s
            start_period: 40s
        networks:
            - app-network

    playwright:
        build:
            context: .
            dockerfile: Dockerfile.playwright
        volumes:
            - .:/app
            - /app/node_modules
        environment:
            - CI=true
            - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
        depends_on:
            app:
                condition: service_started
        profiles:
            - testing
        working_dir: /app
        ports:
            - "9323:9323"
        networks:
            - app-network

networks:
    app-network:
        driver: bridge
        name: dex-testing-network

volumes:
    db:
